name: Build and Deploy to TestFlight

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-submit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install EAS CLI
      run: npm install -g eas-cli
    
    - name: Initialize EAS
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: eas init --id ${{ secrets.EAS_PROJECT_ID }} --non-interactive
    
    - name: Configure EAS credentials
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Create a temporary credentials file
        cat > credentials.json << EOF
        {
          "ios": {
            "credentialsSource": "remote",
            "provisioningProfilePath": null,
            "distributionCertificate": {
              "path": null,
              "password": null,
              "base64Certificate": null,
              "base64CertificatePassword": null
            }
          }
        }
        EOF
        
        # Configure credentials
        eas credentials --platform ios --profile production --non-interactive --credentials-file credentials.json
    
    - name: Build on EAS
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: |
        # First, try to build without capturing output to see the full error
        eas build --platform ios --profile production --non-interactive
        
        # If the build succeeds, capture the output for the build ID
        BUILD_OUTPUT=$(eas build --platform ios --profile production --non-interactive --json)
        BUILD_ID=$(echo $BUILD_OUTPUT | jq -r '.id')
        if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
          echo "Failed to get build ID from output: $BUILD_OUTPUT"
          exit 1
        fi
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
        
    - name: Wait for build to complete
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: |
        MAX_ATTEMPTS=60  # 30 minutes maximum wait time
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Checking build status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
          STATUS=$(eas build:view --json --id $BUILD_ID | jq -r '.status')
          
          if [ "$STATUS" = "FINISHED" ]; then
            echo "Build completed successfully"
            exit 0
          elif [ "$STATUS" = "ERROR" ]; then
            echo "Build failed"
            exit 1
          elif [ "$STATUS" = "null" ] || [ -z "$STATUS" ]; then
            echo "Failed to get build status"
            exit 1
          fi
          
          echo "Build status: $STATUS"
          sleep 30
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        echo "Build timed out after 30 minutes"
        exit 1
    
    - name: Submit to TestFlight
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        ASC_APP_ID: ${{ secrets.ASC_APP_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: eas submit -p ios --latest
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const message = `‚ùå Build failed! Check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          }); 