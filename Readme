# Piggy Chore

A modern mobile application built with React Native and Expo, designed to help users manage their chores and tasks efficiently.

## Features

- Cross-platform support (iOS, Android, and Web)
- Modern and intuitive user interface
- Real-time task management
- Secure authentication and data storage
- Responsive design with gesture support
- Offline capabilities

## Tech Stack

- **Framework**: React Native with Expo
- **Navigation**: Expo Router
- **State Management**: Zustand
- **Backend**: Supabase
- **UI Components**: 
  - React Native Reanimated
  - React Native Gesture Handler
  - Expo Vector Icons
  - Lucide React Native
- **Storage**: AsyncStorage
- **Styling**: React Native Linear Gradient

## Prerequisites

- Node.js (v14 or higher)
- npm or yarn
- Expo CLI
- iOS Simulator (for iOS development)
- Android Studio (for Android development)

## Installation

1. Clone the repository:
```bash
git clone [repository-url]
cd piggy-chore
```

2. Install dependencies:
```bash
npm install
# or
yarn install
```

3. Set up environment variables:
Create a `.env` file in the root directory and add your Supabase credentials:
```
SUPABASE_URL=your_supabase_url
SUPABASE_ANON_KEY=your_supabase_anon_key
```

## Development

To start the development server:

```bash
npm run dev
# or
yarn dev
```

This will start the Expo development server. You can then:
- Press `i` to open in iOS simulator
- Press `a` to open in Android emulator
- Scan the QR code with Expo Go app on your physical device

## Building for Production

### iOS
```bash
eas build --platform ios
```

### Android
```bash
eas build --platform android
```

### Web
```bash
npm run build:web
# or
yarn build:web
```

## Project Structure

```
piggy-chore/
├── app/              # Main application screens
├── assets/           # Static assets (images, fonts)
├── components/       # Reusable UI components
├── contexts/         # React Context providers
├── hooks/           # Custom React hooks
├── lib/             # Utility functions and configurations
├── store/           # Zustand store definitions
├── supabase/        # Supabase client and configurations
└── types/           # TypeScript type definitions
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is private and proprietary. All rights reserved.

## Support

For support, please contact the development team or raise an issue in the repository. 